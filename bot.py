from aiogram import Bot, Dispatcher, executor, types
from aiogram.utils.callback_data import CallbackData
import logging

API_TOKEN = '8189935957:AAHIGvtVwJCnrpj2tTNCJEZbwfcYvlRYfmQ'
ADMIN_ID = 2041956053

bot = Bot(token=API_TOKEN, parse_mode='HTML')
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

buy_cb = CallbackData('buy', 'social', 'item')
pay_cb = CallbackData('pay', 'social', 'item', 'method')
confirm_cb = CallbackData('confirm', 'social', 'item', 'user_id')

social_networks = ['Instagram', 'Telegram', 'TikTok', 'Threads']

payment_methods = {
    'bybit': 'ByBit UID: <code>109789263</code>',
    'binance': 'Binance ID: <code>540037709</code>',
    'pumb': '–ü–£–ú–ë –ë–∞–Ω–∫: <code>5355 2800 2466 5372</code>',
    'privat': '–ü—Ä–∏–≤–∞—Ç –ë–∞–Ω–∫: <code>5168745194585250</code>'
}

method_names = {
    'bybit': 'ByBit –ø–µ—Ä–µ–≤–æ–¥',
    'binance': 'Binance –ø–µ—Ä–µ–≤–æ–¥',
    'pumb': '–ü–£–ú–ë –ë–∞–Ω–∫',
    'privat': '–ü—Ä–∏–≤–∞—Ç –ë–∞–Ω–∫'
}

data = {
    'Instagram': [
        ("–ö–∞–∫ –Ω–∞–±—Ä–∞—Ç—å –ø–µ—Ä–≤—ã—Ö 1 000 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ Instagram\n–±–µ–∑ —Ä–µ–∫–ª–∞–º—ã", "5", "https://drive.google.com/file/d/1tX5SBmcTwcxftDg4MPN60Rr4jWV73Ln7/view?usp=sharing"),
        ("–ê–ª–≥–æ—Ä–∏—Ç–º—ã Instagram –∏ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö –≤ 2025 –≥–æ–¥—É", "4", "https://drive.google.com/file/d/1bSIRQZLWDdM1wrmLFePMpnehz4ZhMqWB/view?usp=sharing"),
        ("–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –≤ Instagram –≤ 2025 –≥–æ–¥—É", "4", "https://drive.google.com/file/d/1-q96rh99P8b2ZdmwH7v9VlccDGtx7NUg/view?usp=sharing"),
        ("–ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω –Ω–∞ –º–µ—Å—è—Ü –¥–ª—è Instagram", "5", "https://drive.google.com/file/d/1vVgEPrWrk17Zsuwv_QSaU1nwdX434QQz/view?usp=sharing"),
        ("–ö–∞–∫ –≤–µ—Å—Ç–∏ Instagram Stories –∫–∞–∂–¥—ã–π –¥–µ–Ω—å", "3.5", "https://drive.google.com/file/d/1kEPqZ9A55WXTzN9KXYkwvFBUXfaOXGsb/view?usp=sharing"),
        ("–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∏ –≤–µ–¥–µ–Ω–∏–µ Instagram –∫–∞–∫ —É —ç–∫—Å–ø–µ—Ä—Ç–æ–≤", "3", "https://drive.google.com/file/d/14yqdEiLMHFogcJXNH-wiiNeeSsisHzQV/view?usp=sharing")
    ],
    'Telegram': [
        ("–ü–∞–∫–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–π –¥–ª—è Instagram –∏ Telegram", "4", "https://drive.google.com/file/d/18SIwmq6X1aeXOnPrpO3R-OacqjEYiamT/view?usp=sharing"),
        ("–°–∫—Ä–∏–ø—Ç—ã –¥–ª—è Telegram-–ø—Ä–æ–¥–∞–∂", "3.5", "https://drive.google.com/file/d/170EAOgsQmCiwL1wSBK0HBewsp_KVFQyQ/view?usp=sharing"),
        ("–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ 7 –¥–Ω–µ–π ‚Äî —à–∞–±–ª–æ–Ω—ã –ø–æ—Å—Ç–æ–≤ –∏ —Å—Ç–æ—Ä–∏—Å", "3.5", "https://drive.google.com/file/d/1HIxdJc0SB0ojlNNz_E5BrFBGtPhtH2dF/view?usp=sharing"),
        ("10 –æ—à–∏–±–æ–∫ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –∏ –∫–∞–∫ –∏—Ö –∏—Å–ø—Ä–∞–≤–∏—Ç—å", "4.5", "https://drive.google.com/file/d/1RXTHRAbviOH_4eM8rJuF5zOdK0Qo_s2S/view?usp=sharing"),
        ("–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ Telegram-–∫–∞–Ω–∞–ª–∞ –∫–∞–∫ —É —ç–∫—Å–ø–µ—Ä—Ç–æ–≤", "4", "https://drive.google.com/file/d/1lKJvJqJD74eXCJ2SUF9BLrdeF_XBCNMG/view?usp=sharing"),
        ("–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ Telegram-–∫–∞–Ω–∞–ª–∞", "4", "https://drive.google.com/file/d/11s-KgHP3O188gTXqpTgbhD0CYgFtcnTO/view?usp=sharing")
    ],
    'TikTok': [
        ("–ì–∞–π–¥ –ø–æ —Ä–æ—Å—Ç—É –∏ –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç–∏", "4", "https://drive.google.com/file/d/1YqIMogKT2cnSqEIc94B0m-92d8gZXmss/view?usp=sharing"),
        ("TikTok –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –∏ –Ω–∏—à–µ–≤—ã—Ö –±–ª–æ–≥–æ–≤", "5", "https://drive.google.com/file/d/1UHJaWZpKyEz2gNWfOdxtRKwdI0fVvRXl/view?usp=sharing"),
        ("–ö–∞–∫ –Ω–∞–±—Ä–∞—Ç—å –ø–µ—Ä–≤—ã–µ 10 000 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –≤ TikTok", "6", "https://drive.google.com/file/d/1oqyJgJvwlJFFrgJ3Mkq61AF6r_E1amiq/view?usp=sharing"),
        ("–ü–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —É—Å–ø–µ—à–Ω–æ–º—É –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—é –≤ TikTok", "7", "https://drive.google.com/file/d/1_TkLbJziYEDa2Rz4wL9gdJtjtIy8dW-2/view?usp=sharing")
    ],
    'Threads': [
        ("–ü–æ–ª–Ω—ã–π –≥–∞–π–¥: –ö–∞–∫ –ø—Ä–æ–¥–≤–∏–≥–∞—Ç—å—Å—è –≤ Threads –æ—Ç Meta", "7", "https://drive.google.com/file/d/1m6qZAPaIz_JhkUS7vT732Zr_kya2AN2t/view?usp=sharing"),
        ("–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ —ç–∫—Å–ø–µ—Ä—Ç–∞ –≤ Threads: –∫–∞–∫ –ø—Ä–æ–¥–∞–≤–∞—Ç—å –∑–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ –ø–æ—Å—Ç—ã", "6", "https://drive.google.com/file/d/1UsLhQZsF2KpO9PeNGTB5N1YbnSUzTsll/view?usp=sharing"),
        ("–ö–æ–Ω—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –≤ Threads", "5", "https://drive.google.com/file/d/1NLdGKCj-CMxTGlmDmDpPVx-xR5frJ2V8/view?usp=sharing"),
        ("–ö–∞–∫ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å Instagram –∏ Twitter –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–¥ Threads", "8", "https://drive.google.com/file/d/1WTE7eXz3uzIFsj4o58I-_rXqT4tHrPyA/view?usp=sharing"),
        ("–ì–∞–π–¥ –ø–æ —Å—Ç–æ—Ä–∏—Ç–µ–ª–ª–∏–Ω–≥—É –∏ —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–º—É –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é", "7", "https://drive.google.com/file/d/1wLZ4kdAkPfjGv_tkhibVZ4s_z8QQs8ew/view?usp=sharing")
    ]
}

def main_menu():
    kb = types.InlineKeyboardMarkup(row_width=1)
    for s in social_networks:
        kb.add(types.InlineKeyboardButton(s, callback_data=s))
    return kb

@dp.message_handler(commands=['start'])
async def start(msg: types.Message):
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ü–∏–∞–ª—å–Ω—É—é —Å–µ—Ç—å:", reply_markup=main_menu())

@dp.callback_query_handler(lambda c: c.data in social_networks)
async def show_items(call: types.CallbackQuery):
    items = data[call.data]
    kb = types.InlineKeyboardMarkup(row_width=1)
    for i, (title, price, _) in enumerate(items):
        kb.add(types.InlineKeyboardButton(f"{title.splitlines()[0]}", callback_data=buy_cb.new(social=call.data, item=str(i))))
    await call.message.edit_text(f"<b>{call.data}</b> ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –≥–∞–π–¥:", reply_markup=kb)

@dp.callback_query_handler(buy_cb.filter())
async def select_payment(call: types.CallbackQuery, callback_data: dict):
    s = callback_data['social']
    i = int(callback_data['item'])
    title, price, _ = data[s][i]
    kb = types.InlineKeyboardMarkup(row_width=1)
    for method in payment_methods:
        kb.add(types.InlineKeyboardButton(method_names[method], callback_data=pay_cb.new(social=s, item=str(i), method=method)))
    kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=s))
    await call.message.edit_text(
        f"<b>{title}</b>\n\n"
        f"–¶–µ–Ω–∞: <b>{price} USDT</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        reply_markup=kb
    )

@dp.callback_query_handler(pay_cb.filter())
async def payment_details(call: types.CallbackQuery, callback_data: dict):
    s = callback_data['social']
    i = int(callback_data['item'])
    method = callback_data['method']
    title, price, _ = data[s][i]
    text = (
        f"<b>{title}</b>\n"
        f"–¶–µ–Ω–∞: <b>{price} USDT</b>\n\n"
        f"–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n"
        f"{payment_methods[method]}\n\n"
        f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
    )
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=confirm_cb.new(social=s, item=str(i), user_id=str(call.from_user.id))))
    kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=buy_cb.new(social=s, item=str(i))))
    await call.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(confirm_cb.filter())
async def confirm_payment(call: types.CallbackQuery, callback_data: dict):
    s = callback_data['social']
    i = int(callback_data['item'])
    user_id = int(callback_data['user_id'])
    title, _, file_link = data[s][i]

    await bot.send_message(ADMIN_ID, f"üì• <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É</b>\n\n"
                                     f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{user_id}</code>\n"
                                     f"–¢–æ–≤–∞—Ä: <b>{title}</b>\n–°–µ—Ç—å: {s}",
                           reply_markup=types.InlineKeyboardMarkup().add(
                               types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f'deliver:{user_id}:{file_link}')
                           ))

    await call.message.edit_text("–û–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞‚Ä¶")

@dp.callback_query_handler(lambda c: c.data.startswith('deliver:'))
async def deliver(call: types.CallbackQuery):
    _, user_id, file_link = call.data.split(':', 2)
    await bot.send_message(user_id, f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É!\n–í–æ—Ç –≤–∞—à —Ñ–∞–π–ª:\n{file_link}")
    await call.message.edit_text("–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∏ —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
