from aiogram import Bot, Dispatcher, executor, types
from aiogram.utils.callback_data import CallbackData
import logging

API_TOKEN = '8189935957:AAHIGvtVwJCnrpj2tTNCJEZbwfcYvlRYfmQ'
ADMIN_ID = 2041956053

bot = Bot(token=API_TOKEN, parse_mode='HTML')
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

buy_cb = CallbackData('buy', 'social', 'item')
pay_cb = CallbackData('pay', 'social', 'item', 'method')
confirm_cb = CallbackData('confirm', 'social', 'item', 'method')
deliver_cb = CallbackData('deliver', 'social', 'item', 'user', 'msg', 'method')
reject_cb = CallbackData('reject', 'social', 'item', 'user', 'msg')
lang_cb = CallbackData('lang', 'language')

user_languages = {}

data = {
    'Instagram': [
        ("–ö–∞–∫ –Ω–∞–±—Ä–∞—Ç—å –ø–µ—Ä–≤—ã—Ö 1 000 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ Instagram\n–±–µ–∑ —Ä–µ–∫–ª–∞–º—ã", "5", "https://drive.google.com/file/d/1tX5SBmcTwcxftDg4MPN60Rr4jWV73Ln7/view?usp=sharing"),
        ("–ê–ª–≥–æ—Ä–∏—Ç–º—ã Instagram –∏ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö –≤ 2025 –≥–æ–¥—É", "4", "https://drive.google.com/file/d/1bSIRQZLWDdM1wrmLFePMpnehz4ZhMqWB/view?usp=sharing"),
        ("–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –≤ Instagram –≤ 2025 –≥–æ–¥—É", "4", "https://drive.google.com/file/d/1-q96rh99P8b2ZdmwH7v9VlccDGtx7NUg/view?usp=sharing"),
        ("–ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω –Ω–∞ –º–µ—Å—è—Ü –¥–ª—è Instagram", "5", "https://drive.google.com/file/d/1vGEPqZWrk17Zsuwv_QSaU1nwdX434QQz/view?usp=sharing"),
        ("–ö–∞–∫ –≤–µ—Å—Ç–∏ Instagram Stories –∫–∞–∂–¥—ã–π –¥–µ–Ω—å", "3.5", "https://drive.google.com/file/d/1kEPqZ9A55WXTzN9KXYkwvFBUXfaOXGsb/view?usp=sharing"),
        ("–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∏ –≤–µ–¥–µ–Ω–∏–µ Instagram –∫–∞–∫ —É —ç–∫—Å–ø–µ—Ä—Ç–æ–≤", "3", "https://drive.google.com/file/d/14yqdEiLMHFogcJXNH-wiiNeeSsisHzQV/view?usp=sharing")
    ],
    'Telegram': [
        ("–ü–∞–∫–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–π –¥–ª—è Instagram –∏ Telegram", "4", "https://drive.google.com/file/d/18SIwmq6X1aeXOnPrpO3R-OacqjEYiamT/view?usp=sharing"),
        ("–°–∫—Ä–∏–ø—Ç—ã –¥–ª—è Telegram-–ø—Ä–æ–¥–∞–∂", "3.5", "https://drive.google.com/file/d/170EAOgsQmCiwL1wSBK0HBewsp_KVFQyQ/view?usp=sharing"),
        ("–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ 7 –¥–Ω–µ–π ‚Äî —à–∞–±–ª–æ–Ω—ã –ø–æ—Å—Ç–æ–≤ –∏ —Å—Ç–æ—Ä–∏—Å", "3.5", "https://drive.google.com/file/d/1HIxdJc0SB0ojlNNz_E5BrFBGtPhtH2dF/view?usp=sharing"),
        ("10 –æ—à–∏–±–æ–∫ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –∏ –∫–∞–∫ –∏—Ö –∏—Å–ø—Ä–∞–≤–∏—Ç—å", "4.5", "https://drive.google.com/file/d/1RXTHRAbviOH_4eM8rJuF5zOdK0Qo_s2S/view?usp=sharing"),
        ("–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ Telegram-–∫–∞–Ω–∞–ª–∞ –∫–∞–∫ —É —ç–∫—Å–ø–µ—Ä—Ç–æ–≤", "4", "https://drive.google.com/file/d/1lKJvJqJD74eXCJ2SUF9BLrdeF_XBCNMG/view?usp=sharing"),
        ("–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ Telegram-–∫–∞–Ω–∞–ª–∞", "4", "https://drive.google.com/file/d/11s-KgHP3O188gTXqpTgbhD0CYgFtcnTO/view?usp=sharing")
    ],
    'TikTok': [
        ("–ì–∞–π–¥ –ø–æ —Ä–æ—Å—Ç—É –∏ –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç–∏", "4", "https://drive.google.com/file/d/1YqIMogKT2cnSqEIc94B0m-92d8gZXmss/view?usp=sharing"),
        ("TikTok –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –∏ –Ω–∏—à–µ–≤—ã—Ö –±–ª–æ–≥–æ–≤", "5", "https://drive.google.com/file/d/1UHJaWZpKyEz2gNWfOdxtRKwdI0fVvRXl/view?usp=sharing"),
        ("–ö–∞–∫ –Ω–∞–±—Ä–∞—Ç—å –ø–µ—Ä–≤—ã–µ 10 000 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –≤ TikTok", "6", "https://drive.google.com/file/d/1oqyJgJvwlJFFrgJ3Mkq61AF6r_E1amiq/view?usp=sharing"),
        ("–ü–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —É—Å–ø–µ—à–Ω–æ–º—É –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—é –≤ TikTok", "7", "https://drive.google.com/file/d/1_TkLbJziYEDa2Rz4wL9gdJtjtIy8dW-2/view?usp=sharing")
    ],
    'Threads': [
        ("–ü–æ–ª–Ω—ã–π –≥–∞–π–¥: –ö–∞–∫ –ø—Ä–æ–¥–≤–∏–≥–∞—Ç—å—Å—è –≤ Threads –æ—Ç Meta", "7", "https://drive.google.com/file/d/1m6qZAPaIz_JhkUS7vT732Zr_kya2AN2t/view?usp=sharing"),
        ("–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ —ç–∫—Å–ø–µ—Ä—Ç–∞ –≤ Threads: –∫–∞–∫ –ø—Ä–æ–¥–∞–≤–∞—Ç—å –∑–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ –ø–æ—Å—Ç—ã", "6", "https://drive.google.com/file/d/1UsLhQZsF2KpO9PeNGTB5N1YbnSUzTsll/view?usp=sharing"),
        ("–ö–æ–Ω—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –≤ Threads", "5", "https://drive.google.com/file/d/1NLdGKCj-CMxTGlmDmDpPVx-xR5frJ2V8/view?usp=sharing"),
        ("–ö–∞–∫ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å Instagram –∏ Twitter –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–¥ Threads", "8", "https://drive.google.com/file/d/1WTE7eXz3uzIFsj4o58I-_rXqT4tHrPyA/view?usp=sharing"),
        ("–ì–∞–π–¥ –ø–æ —Å—Ç–æ—Ä–∏—Ç–µ–ª–ª–∏–Ω–≥—É –∏ —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–º—É –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é", "7", "https://drive.google.com/file/d/1wLZ4kdAkPfjGv_tkhibVZ4s_z8QQs8ew/view?usp=sharing")
    ]
}


social_networks = list(data.keys())

payment_methods = {
    'bybit': 'ByBit UID: <code>109789263</code>',
    'binance': 'Binance ID: <code>540037709</code>',
    'pumb': '–ü–£–ú–ë –ë–∞–Ω–∫: <code>5355 2800 2466 5372</code>',
    'privat': '–ü—Ä–∏–≤–∞—Ç –ë–∞–Ω–∫: <code>5168745194585250</code>'
}

method_names = {
    'bybit': {'ru': 'ByBit –ø–µ—Ä–µ–≤–æ–¥', 'uk': 'ByBit –ø–µ—Ä–µ–∫–∞–∑'},
    'binance': {'ru': 'Binance –ø–µ—Ä–µ–≤–æ–¥', 'uk': 'Binance –ø–µ—Ä–µ–∫–∞–∑'},
    'pumb': {'ru': '–ü–£–ú–ë –ë–∞–Ω–∫', 'uk': '–ü–£–ú–ë –ë–∞–Ω–∫'},
    'privat': {'ru': '–ü—Ä–∏–≤–∞—Ç –ë–∞–Ω–∫', 'uk': '–ü—Ä–∏–≤–∞—Ç –ë–∞–Ω–∫'}
}

def get_main_menu(lang: str):
    kb = types.InlineKeyboardMarkup(row_width=1)
    for s in social_networks:
        kb.add(types.InlineKeyboardButton(s, callback_data=s))
    kb.add(types.InlineKeyboardButton(
        "üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫" if lang == 'ru' else "üåê –ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É",
        callback_data=lang_cb.new(language='switch')
    ))
    return kb

def welcome_text(lang: str):
    if lang == 'ru':
        return (
            "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤!</b>\n\n"
            "–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –≥–∞–π–¥—ã, –∫—É—Ä—Å—ã –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö.\n\n"
            "üîπ –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç.\n"
            "üîπ –û–ø–ª–∞—Ç–∏—Ç–µ —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º.\n"
            "üîπ –ü–æ–ª—É—á–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n\n"
            "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫¬ª –≤–Ω–∏–∑—É."
        )
    else:
        return (
            "<b>–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –Ω–∞—à–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω—É —Ü–∏—Ñ—Ä–æ–≤–∏—Ö –ø—Ä–æ–¥—É–∫—Ç—ñ–≤!</b>\n\n"
            "–¢—É—Ç –≤–∏ –∑–Ω–∞–π–¥–µ—Ç–µ –µ–∫—Å–∫–ª—é–∑–∏–≤–Ω—ñ –≥–∞–π–¥–∏, –∫—É—Ä—Å–∏ —Ç–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –∑ —Ä–æ–∑–≤–∏—Ç–∫—É –≤ —Å–æ—Ü–º–µ—Ä–µ–∂–∞—Ö.\n\n"
            "üîπ –û–±–µ—Ä—ñ—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—É, —è–∫–∞ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å.\n"
            "üîπ –û–ø–ª–∞—Ç—ñ—Ç—å –∑—Ä—É—á–Ω–∏–º —Å–ø–æ—Å–æ–±–æ–º.\n"
            "üîπ –û—Ç—Ä–∏–º–∞–π—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –ø—ñ—Å–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.\n\n"
            "–©–æ–± –∑–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É ‚Äî –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É ¬´–ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É¬ª –≤–Ω–∏–∑—É."
        )


@dp.message_handler(commands=['start'])
async def start(msg: types.Message):
    user_languages[msg.from_user.id] = 'ru'
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.add(
        types.InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data=lang_cb.new(language='ru')),
        types.InlineKeyboardButton("üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", callback_data=lang_cb.new(language='uk'))
    )
    await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:", reply_markup=kb)

@dp.callback_query_handler(lang_cb.filter())
async def change_language(call: types.CallbackQuery, callback_data: dict):
    lang = callback_data['language']
    user_id = call.from_user.id

    if lang == 'switch':
        current = user_languages.get(user_id, 'ru')
        new_lang = 'uk' if current == 'ru' else 'ru'
        user_languages[user_id] = new_lang
    else:
        user_languages[user_id] = lang

    lang = user_languages[user_id]

    await call.message.edit_text(welcome_text(lang), reply_markup=get_main_menu(lang))

@dp.callback_query_handler(lambda c: c.data in social_networks)
async def show_items(call: types.CallbackQuery):
    user_id = call.from_user.id
    lang = user_languages.get(user_id, 'ru')
    s = call.data
    items = data[s]
    kb = types.InlineKeyboardMarkup(row_width=1)
    for i, (title, price, _) in enumerate(items):
        kb.add(types.InlineKeyboardButton(title.splitlines()[0], callback_data=buy_cb.new(social=s, item=str(i))))
    back_text = "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" if lang == 'ru' else "‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"
    kb.add(types.InlineKeyboardButton(back_text, callback_data='main'))
    await call.message.edit_text(f"<b>{s}</b> ‚Äî {'–≤—ã–±–µ—Ä–∏—Ç–µ –≥–∞–π–¥' if lang == 'ru' else '–æ–±–µ—Ä—ñ—Ç—å –≥–∞–π–¥'}:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data == 'main')
async def go_main(call: types.CallbackQuery):
    user_id = call.from_user.id
    lang = user_languages.get(user_id, 'ru')
    await call.message.edit_text(welcome_text(lang), reply_markup=get_main_menu(lang))

@dp.callback_query_handler(buy_cb.filter())
async def select_payment(call: types.CallbackQuery, callback_data: dict):
    user_id = call.from_user.id
    lang = user_languages.get(user_id, 'ru')
    s = callback_data['social']
    i = int(callback_data['item'])
    title, price, _ = data[s][i]
    kb = types.InlineKeyboardMarkup(row_width=1)
    for method in payment_methods:
        kb.add(types.InlineKeyboardButton(method_names[method][lang], callback_data=pay_cb.new(social=s, item=str(i), method=method)))
    back_text = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" if lang == 'ru' else "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
    kb.add(types.InlineKeyboardButton(back_text, callback_data=s))
    await call.message.edit_text(
        f"<b>{title}</b>\n\n" +
        (f"–¶–µ–Ω–∞: <b>{price} USDT</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:" if lang == 'ru' else
         f"–¶—ñ–Ω–∞: <b>{price} USDT</b>\n\n–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:"),
        reply_markup=kb
    )

@dp.callback_query_handler(pay_cb.filter())
async def payment_details(call: types.CallbackQuery, callback_data: dict):
    s = callback_data['social']
    i = int(callback_data['item'])
    method = callback_data['method']
    title, price_usdt, _ = data[s][i]

    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ü–µ–Ω—ã
    if method in ['pumb', 'privat']:
        rate = 40  # –∫—É—Ä—Å USDT –∫ –≥—Ä–∏–≤–Ω–µ
        price_uah = round(float(price_usdt) * rate)
        price_text = f"<b>{price_uah} –≥—Ä–Ω</b> (‚âà {price_usdt} USDT)"
    else:
        price_text = f"<b>{price_usdt} USDT</b>"

    text = (
        f"<b>{title}</b>\n"
        f"–¶–µ–Ω–∞: {price_text}\n\n"
        f"–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n{payment_methods[method]}\n\n"
        f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
    )

    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=confirm_cb.new(social=s, item=str(i), method=method)))
    kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=buy_cb.new(social=s, item=str(i))))

    await call.message.edit_text(text, reply_markup=kb)

    user_id = call.from_user.id
    lang = user_languages.get(user_id, 'ru')
    s = callback_data['social']
    i = int(callback_data['item'])
    method = callback_data['method']
    title, price, _ = data[s][i]
    text = (f"<b>{title}</b>\n" +
            (f"–¶–µ–Ω–∞: <b>{price} USDT</b>\n\n–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n{payment_methods[method]}\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
             if lang == 'ru' else
             f"–¶—ñ–Ω–∞: <b>{price} USDT</b>\n\n–†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏:\n{payment_methods[method]}\n\n–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ."))
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton(
        "‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª" if lang == 'ru' else "‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–≤",
        callback_data=confirm_cb.new(social=s, item=str(i), method=method)
    ))
    back_text = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" if lang == 'ru' else "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
    kb.add(types.InlineKeyboardButton(back_text, callback_data=buy_cb.new(social=s, item=str(i))))
    await call.message.edit_text(text, reply_markup=kb)

@dp.callback_query_handler(confirm_cb.filter())
async def confirm_payment(call: types.CallbackQuery, callback_data: dict):
    s = callback_data['social']
    i = int(callback_data['item'])
    method = callback_data['method']
    user_id = call.from_user.id
    username = call.from_user.username or '–±–µ–∑ username'
    title, price, _ = data[s][i]
    lang = user_languages.get(user_id, 'ru')

    wait_text = ("–û–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞‚Ä¶" if lang == 'ru' else "–û—á—ñ–∫—É—î—Ç—å—Å—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞‚Ä¶")
    msg = await call.message.edit_text(wait_text)

    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.add(
        types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=deliver_cb.new(social=s, item=str(i), user=str(user_id), msg=str(msg.message_id), method=method)),
        types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=reject_cb.new(social=s, item=str(i), user=str(user_id), msg=str(msg.message_id)))
    )

    await bot.send_message(
        ADMIN_ID,
        (f"üõí –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞\n"
         f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{user_id}</code> (@{username})\n"
         f"üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{title}</b>\n"
         f"üíµ –¶–µ–Ω–∞: <b>{price} USDT</b>\n"
         f"üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: <b>{method_names[method]['ru']}</b>"),
        reply_markup=kb
    )

@dp.callback_query_handler(deliver_cb.filter())
async def deliver_file(call: types.CallbackQuery, callback_data: dict):
    if call.from_user.id != ADMIN_ID:
        await call.answer("–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ", show_alert=True)
        return

    s = callback_data['social']
    i = int(callback_data['item'])
    user_id = int(callback_data['user'])
    msg_id = int(callback_data['msg'])
    method = callback_data['method']
    _, _, file_link = data[s][i]

    try:
        await bot.delete_message(user_id, msg_id)
    except:
        pass

    lang = user_languages.get(user_id, 'ru')

    text = ("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É!\n–í–æ—Ç –≤–∞—à —Ñ–∞–π–ª:\n" if lang == 'ru' else "‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –æ–ø–ª–∞—Ç—É!\n–û—Å—å –≤–∞—à —Ñ–∞–π–ª:\n") + file_link

    await bot.send_message(
        user_id,
        text,
        reply_markup=types.InlineKeyboardMarkup().add(
            types.InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" if lang == 'ru' else "‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data='main')
        )
    )
    await call.message.edit_text("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –≥–∞–π–¥ –≤—ã–¥–∞–Ω.")

@dp.callback_query_handler(reject_cb.filter())
async def reject_payment(call: types.CallbackQuery, callback_data: dict):
    if call.from_user.id != ADMIN_ID:
        await call.answer("–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ", show_alert=True)
        return

    user_id = int(callback_data['user'])
    msg_id = int(callback_data['msg'])

    try:
        await bot.delete_message(user_id, msg_id)
    except:
        pass

    lang = user_languages.get(user_id, 'ru')
    text = ("‚ùå <b>–ü–ª–∞—Ç—ë–∂ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω</b>\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞." if lang == 'ru'
            else "‚ùå <b>–ü–ª–∞—Ç—ñ–∂ –Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ</b>\n–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–∞–Ω—ñ —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

    await bot.send_message(
        user_id,
        text
    )

    await call.message.edit_text("‚ùå –ü–ª–∞—Ç—ë–∂ –æ—Ç–∫–ª–æ–Ω—ë–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
