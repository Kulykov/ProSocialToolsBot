from aiogram import Bot, Dispatcher, executor, types
from aiogram.utils.callback_data import CallbackData
import logging

API_TOKEN = '8189935957:AAHIGvtVwJCnrpj2tTNCJEZbwfcYvlRYfmQ'
ADMIN_ID = 2041956053
TRC20_WALLET = 'TVc4ndDw68YF2PRsWkCeAJFboBmedzteXE'

bot = Bot(token=API_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

buy_cb = CallbackData('buy', 'item')
nav_cb = CallbackData('nav', 'action', 'item')
confirm_cb = CallbackData("confirm", "user_id", "item_id")

products = {
    'prod1': {
        'title': '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ Telegram-–∫–∞–Ω–∞–ª–∞',
        'description': '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –≥–∞–π–¥ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —Å—Ç–∏–ª—å–Ω–æ–≥–æ –∏ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–≥–æ Telegram-–∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –¥–æ–≤–µ—Ä–∏—è –∏ —É–¥–µ—Ä–∂–∞–Ω–∏—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏.',
        'price': 4,
        'link': 'https://drive.google.com/file/d/1nkEJGzW5ZyOhkX0lcUhWk6dknVe-Bu4i/view?usp=sharing'
    },
    'prod2': {
        'title': '–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤–∏–¥–∂–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è',
        'description': '–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π –≤–∏–¥–∂–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –Ω–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ –≤–∞—à Telegram-–∫–∞–Ω–∞–ª –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –æ—Ö–≤–∞—Ç.',
        'price': 3,
        'link': 'https://drive.google.com/file/d/1zAx9Z9mG2UtNp52h5VpBEywME0qPJlB3/view?usp=sharing'
    },
    'prod3': {
        'title': '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ–±–ª–æ–∂–∫–∏ –¥–ª—è Telegram',
        'description': '–ù–∞–±–æ—Ä —Å—Ç–∏–ª—å–Ω—ã—Ö –∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±–ª–æ–∂–µ–∫, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ—Å—Ç—å –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞.',
        'price': 3,
        'link': 'https://drive.google.com/file/d/1OB1tyLr2_m_Ck8KviM2sfG3SOZlLh6di/view?usp=sharing'
    },
    # –î–æ–±–∞–≤—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ —Ç–æ–º—É –∂–µ —à–∞–±–ª–æ–Ω—É
}

def main_menu_kb():
    kb = types.InlineKeyboardMarkup(row_width=1)
    for pid, data in products.items():
        kb.add(types.InlineKeyboardButton(
            text=data['title'],
            callback_data=buy_cb.new(item=pid)
        ))
    return kb

def guide_kb(item_id):
    kb = types.InlineKeyboardMarkup(row_width=1)
    kb.add(types.InlineKeyboardButton("üí∏ –û–ø–ª–∞—Ç–∏–ª", callback_data=f"paid_{item_id}"))
    kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=nav_cb.new(action='back', item='none')))
    return kb

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:", reply_markup=main_menu_kb())

@dp.callback_query_handler(buy_cb.filter())
async def show_guide(call: types.CallbackQuery, callback_data: dict):
    pid = callback_data['item']
    product = products[pid]
    text = (
        f"<b>{product['title']}</b>\n\n"
        f"{product['description']}\n\n"
        f"<b>–¶–µ–Ω–∞:</b> {product['price']} USDT\n"
        f"<b>TRC20:</b> <code>{TRC20_WALLET}</code>\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
    )
    await call.message.delete()
    await call.message.answer(text, reply_markup=guide_kb(pid))

@dp.callback_query_handler(lambda c: c.data.startswith("paid_"))
async def confirm_request(call: types.CallbackQuery):
    pid = call.data.split("_")[1]
    product = products[pid]
    user = call.from_user

    confirm_btn = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton(
            "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É",
            callback_data=confirm_cb.new(user_id=user.id, item_id=pid)
        )
    )

    await bot.send_message(
        ADMIN_ID,
        f"üì¨ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã:\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username or '–±–µ–∑ username'} (ID: <code>{user.id}</code>)\n"
        f"üì¶ –¢–æ–≤–∞—Ä: <b>{product['title']}</b>\n"
        f"üí∞ –°—É–º–º–∞: {product['price']} USDT\n"
        f"üí≥ –ö–æ—à–µ–ª—ë–∫ (TRC20): <code>{TRC20_WALLET}</code>",
        reply_markup=confirm_btn
    )

    await call.message.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
    await call.answer()

@dp.callback_query_handler(confirm_cb.filter())
async def handle_confirm_payment(call: types.CallbackQuery, callback_data: dict):
    user_id = int(callback_data['user_id'])
    item_id = callback_data['item_id']
    product = products[item_id]

    try:
        await bot.send_message(
            user_id,
            f"‚úÖ –í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\nüì• –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –≥–∞–π–¥:\n{product['link']}"
        )
        await call.message.edit_text(f"‚úÖ –û–ø–ª–∞—Ç–∞ –∑–∞ <b>{product['title']}</b> –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")
        await call.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –≥–∞–π–¥.")
    except Exception as e:
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–∞–π–¥–∞.")
        print(f"–û—à–∏–±–∫–∞: {e}")

@dp.callback_query_handler(nav_cb.filter())
async def navigation(call: types.CallbackQuery, callback_data: dict):
    if callback_data['action'] == 'back':
        await call.message.delete()
        await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:", reply_markup=main_menu_kb())
