from aiogram import Bot, Dispatcher, executor, types
import logging

API_TOKEN = '8189935957:AAHIGvtVwJCnrpj2tTNCJEZbwfcYvlRYfmQ'
ADMIN_ID = 2041956053

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å–æ—Ü—Å–µ—Ç–µ–π (–∫–∞–∂–¥–∞—è –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ)
def social_menu():
    kb = types.InlineKeyboardMarkup(row_width=1)
    kb.add(
        types.InlineKeyboardButton("Instagram", callback_data="social_instagram"),
        types.InlineKeyboardButton("Telegram", callback_data="social_telegram"),
        types.InlineKeyboardButton("TikTok", callback_data="social_tiktok"),
        types.InlineKeyboardButton("Threads", callback_data="social_threads"),
    )
    return kb

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã:",
        reply_markup=social_menu()
    )

@dp.callback_query_handler(lambda call: call.data.startswith("social_"))
async def handle_social_click(call: types.CallbackQuery):
    social = call.data.split("_")[1].capitalize()
    await call.message.edit_text(
        f"üìå –†–∞–∑–¥–µ–ª <b>{social}</b> –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –ø–æ–∑–∂–µ!",
        parse_mode="HTML",
        reply_markup=types.InlineKeyboardMarkup().add(
            types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")
        )
    )
    await call.answer()

@dp.callback_query_handler(lambda call: call.data == "back_to_menu")
async def back_to_menu(call: types.CallbackQuery):
    await call.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã:",
        reply_markup=social_menu()
    )
    await call.answer()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
